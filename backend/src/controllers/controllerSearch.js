const Product = require("../models/core/product");
const Category = require("../models/core/category");
const Blog = require("../models/core/blog");

const controllerSearch = async (req, res) => {
  const q = req.query.q?.trim() || "";
  if (!q) return res.status(400).json({ message: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm" });

  try {
    const regex = new RegExp(q, "i"); // t√¨m kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng

    // üî∏ T√¨m s·∫£n ph·∫©m (t√™n, m√¥ t·∫£)
    const products = await Product.find({ name: regex })
      .populate("category", "name") // l·∫•y th√™m t√™n danh m·ª•c
      .limit(10);

    // üî∏ T√¨m danh m·ª•c (t√™n, m√¥ t·∫£)
    const categories = await Category.find({ name: regex }).limit(10);

    // üî∏ T√¨m blog (ti√™u ƒë·ªÅ, n·ªôi dung)
    const blogs = await Blog.find({ title: regex }).limit(10);

    let productsByCategory = [];
    if (categories.length > 0) {
      const catIds = categories.map((c) => c._id);
      productsByCategory = await Product.find({ category: { $in: catIds } })
        .populate("category", "name")
        .limit(20);
    }

    const combinedProducts = [
      ...products,
      ...productsByCategory.filter(
        (p) => !products.some((item) => item._id.equals(p._id))
      ),
    ];
    res.json({ products: combinedProducts, categories, blogs });
  } catch (err) {
    console.error("Search error:", err);
    res.status(500).json({ message: "L·ªói khi t√¨m ki·∫øm" });
  }
};

module.exports = {
  controllerSearch,
};
