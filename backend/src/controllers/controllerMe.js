const User = require("../models/rbac/user");
const bcrypt = require("bcryptjs");

// üü¢ L·∫•y th√¥ng tin ch√≠nh m√¨nh
const getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user._id)
      .select("name email avatar bio role") // ch·ªâ l·∫•y field c·∫ßn thi·∫øt
      .populate("role", "name") // n·∫øu c√≥ ref role
      .lean();

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({
      message: "L·∫•y th√¥ng tin th√†nh c√¥ng",
      user, // ‚úÖ g√≥i trong object ƒë·ªÉ frontend d·ªÖ x·ª≠ l√Ω
    });
  } catch (err) {
    res.status(500).json({
      message: "L·ªói l·∫•y profile",
      error: err.message,
    });
  }
};

// üü¢ C·∫≠p nh·∫≠t profile ch√≠nh m√¨nh
const updateProfile = async (req, res) => {
  try {
    const allowedFields = ["name", "avatar", "bio"]; // ch·ªâ cho update c√°c field n√†y
    const updateData = {};

    allowedFields.forEach((field) => {
      if (req.body[field] !== undefined) {
        updateData[field] = req.body[field];
      }
    });

    const updated = await User.findByIdAndUpdate(req.user._id, updateData, {
      new: true,
      select: "name email avatar bio role",
    });

    res.json(updated);
  } catch (err) {
    res.status(500).json({ message: "L·ªói c·∫≠p nh·∫≠t profile", error: err });
  }
};

// üü¢ ƒê·ªïi m·∫≠t kh·∫©u
const changePassword = async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m·∫≠t kh·∫©u" });
    }

    const user = await User.findById(req.user._id);
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    await user.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói ƒë·ªïi m·∫≠t kh·∫©u", error: err });
  }
};

// üü¢ L·∫•y profile c√¥ng khai c·ªßa ng∆∞·ªùi kh√°c
const getPublicProfile = async (req, res) => {
  try {
    const { id } = req.params;
    const user = await User.findById(id)
      .select("name avatar bio") // ch·ªâ field c√¥ng khai
      .lean();

    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y user" });
    }

    res.json(user);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y public profile" });
  }
};

module.exports = {
  getProfile,
  changePassword,
  updateProfile,
  getPublicProfile,
};
